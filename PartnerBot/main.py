# Skyfort Partner Telegram Bot
# -*- coding: utf-8 -*-

import logging
import re
import xrequests as reqs
from configs import BOT_CONFIGS, LESSONS, SpyLogButton
import notifier as notr

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from telegram.ext import Application, PicklePersistence

from telegram.error import BadRequest


async def clear_kbd(query):
    """–£–±–∏—Ä–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª callback."""
    try:
        await query.message.edit_reply_markup(reply_markup=None)
    except BadRequest:
        pass

JOB_NAME_TPL = "unlock_%s_lesson%d"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ------------- Conversation states -------------
REG_CONTACT, REG_NAME, REG_EMAIL, REG_FIELD = range(4)


# ------------- Helpers -------------


def menu_text() -> str:
    """Common descriptive block shown on every menu screen."""
    return (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ\n–ü—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n–ü–æ–ª–µ–∑–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
        "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞–∫—Ü–∏–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"
    )


def build_main_menu(registered: bool) -> InlineKeyboardMarkup:
    """Return the main menu keyboard, locking options until `registered` is True."""
    if registered:
        keyboard = [
            [InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="referral")],
            [InlineKeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="offers")],
            [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ", callback_data="education")],
            [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")],
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
            [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")],
            [InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ üîí", callback_data="locked")],
            [InlineKeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üîí", callback_data="locked")],
            [InlineKeyboardButton("–û–±—É—á–µ–Ω–∏–µ üîí", callback_data="locked")],
        ]
    return InlineKeyboardMarkup(keyboard)


def build_lessons(progress: int):
    if progress == 0:
        keyboard = [
            [InlineKeyboardButton("1", callback_data="lesson1")],
            [InlineKeyboardButton("2 üîí", callback_data="locked")],
            [InlineKeyboardButton("3 üîí", callback_data="locked")],
            [InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu")],
        ]
    elif progress == 1:
        keyboard = [
            [InlineKeyboardButton("1 ‚úÖ", callback_data="locked")],
            [InlineKeyboardButton("2", callback_data="lesson2")],
            [InlineKeyboardButton("3 üîí", callback_data="locked")],
            [InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu")],
        ]
    elif progress == 2:
        keyboard = [
            [InlineKeyboardButton("1 ‚úÖ", callback_data="locked")],
            [InlineKeyboardButton("2 ‚úÖ", callback_data="locked")],
            [InlineKeyboardButton("3", callback_data="lesson3")],
            [InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu")],
        ]
    return InlineKeyboardMarkup(keyboard)


def validate_email(email: str) -> bool:
    return bool(re.fullmatch(r"[^@\s]+@[^@\s]+\.[^@\s]+", email))

video_ids = {}


async def send_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE, video_path):
    chat_id = update.effective_chat.id

    video_id = video_ids.get(video_path)
    if video_id:
        await ctx.application.create_task(
            ctx.bot.send_video(chat_id, video=video_id)
        )
    else:
        msg = await ctx.bot.send_video(
            chat_id,
            video=open(video_path, "rb"),
            # caption="First upload; will be cached",
        )
        video_ids[video_path] = msg.video.file_id


# ------------- Core commands -------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get("started"):
        registered = context.user_data.get("registered", False)
        await update.message.reply_text(
            menu_text(),
            reply_markup=build_main_menu(registered),
        )
        return

    payload = context.args[0] if context.args else None
    referrer_id = int(payload) if payload and payload.isdigit() else None
    context.user_data["referrer_id"] = referrer_id

    # ---------- –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ----------
    context.user_data["started"] = True  # –ø–æ–º–Ω–∏–º, —á—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏

    """Entry command: always resets to consent screen."""
    # Cancel any running conversation for this user/chat
    if user_conv := context.user_data.get("_conversation"):  # noqa: E501 ‚Äî helper key populated in conv handler
        user_conv[0].end(user_conv[1])  # (handler, key)
        context.user_data.pop("_conversation", None)

    user = update.effective_user  # telegram.User
    await reqs.ensure_tg_user(user.id, user.username)

    # consent_kb = InlineKeyboardMarkup(
    #     [[InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", callback_data="agree")]]
    # )
#     await update.message.reply_text(
#         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ Skyfort!!! "
#         "–ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏.",
# #        reply_markup=consent_kb,
#     )

    await send_video(update, context, "source4/intro.mp4")
    context.user_data.setdefault("registered", False)
    await update.message.reply_text(menu_text(), reply_markup=build_main_menu(context.user_data["registered"]))



# ------------- CallbackQuery handlers -------------
async def agree_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await clear_kbd(query)
    context.user_data.setdefault("registered", False)
    await query.message.reply_text(menu_text(), reply_markup=build_main_menu(context.user_data["registered"]))


async def locked_pressed(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer("–î–æ—Å—Ç—É–ø–∫ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç", show_alert=True)


async def contact_pressed(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await clear_kbd(query)

    await reqs.spylog_click(tg_id=update.effective_user.id, button_id=SpyLogButton["connect_start"])

    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        """üìû –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!
–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—è–º–∏.
üìå –ö–æ–Ω—Ç–∞–∫—Ç—ã:
üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: 
üì± Telegram: @company_support
üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
üåê –°–∞–π—Ç: [—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç]""",
    reply_markup=InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="contact_request")],
                [InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu_f_contact")],
            ]
        )
    )


async def contact_request_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await clear_kbd(query)

    await notr.contact_send(
        username=update.effective_user.username,
        name=context.user_data.get("phone", ""),
        phone=context.user_data.get("name", ""),
        email=context.user_data.get("email", ""),
        field_info=context.user_data.get("field", ""),
    )

    await reqs.spylog_click(tg_id=update.effective_user.id, button_id=SpyLogButton["connect_finish"])
    await reqs.spylog_click(tg_id=update.effective_user.id, button_id=SpyLogButton["connect_conv"])

    await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\r\n–° –≤–∞–º–∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.")
    await query.message.reply_text(menu_text(), reply_markup=build_main_menu(context.user_data["registered"]))


# ------------- Registration conversation -------------
async def register_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if context.user_data["registered"]:
        return

    query = update.callback_query
    await query.answer()
    await clear_kbd(query)

    tg_user = update.effective_user
    await reqs.ensure_tg_user(tg_user.id, tg_user.username)

    await reqs.spylog_click(tg_id=tg_user.id, button_id=SpyLogButton["register_start"])

    await notr.reg_send(
        username=tg_user.username
    )

    await reqs.create_userhub_if_absent(tg_user.id)

    contact_kb = ReplyKeyboardMarkup(
        [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await query.message.reply_text(
        "–®–∞–≥ 1 –∏–∑ 4\nüì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ Telegram.\n"
        "–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üëá",
        reply_markup=contact_kb,
    )
    return REG_CONTACT


async def reg_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.contact is None:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.")
        return REG_CONTACT

    context.user_data["phone"] = update.message.contact.phone_number
    await update.message.reply_text(
        "–®–∞–≥ 2 –∏–∑ 4\nüßæ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û).\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ üëá",
        reply_markup=ReplyKeyboardRemove(),
    )
    return REG_NAME


async def reg_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text(
        "–®–∞–≥ 3 –∏–∑ 4:\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email, —á—Ç–æ–±—ã:\n"
        "üì¢ –ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π\nüìö –ü–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\nüöÄ –ù–µ —É–ø—É—Å—Ç–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à email –Ω–∏–∂–µ üëá"
    )
    return REG_EMAIL


async def reg_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    email = update.message.text.strip()
    if not validate_email(email):
        await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚§µÔ∏è")
        return REG_EMAIL  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    context.user_data["email"] = email
    await update.message.reply_text(
        "–®–∞–≥ 4 –∏–∑ 4:\nüíº –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ.\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å üëá"
    )
    return REG_FIELD


async def reg_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    tg_user_id = update.effective_user.id

    context.user_data["field"] = update.message.text.strip()
    context.user_data["registered"] = True

    await reqs.update_userhub_data(
        tg_id=update.effective_user.id,
        phone=context.user_data.get("phone"),
        name=context.user_data.get("name"),
        email=context.user_data.get("email"),
        field_info=context.user_data["field"],
        registered=True,
        referrer_id=context.user_data.get("referrer_id"),
    )

    await notr.register_send(
        name=context.user_data.get("phone"),
        phone=context.user_data.get("name"),
        email=context.user_data.get("email"),
        field_info=context.user_data["field"],
    )

    await reqs.spylog_click(tg_id=tg_user_id, button_id=SpyLogButton["register_finish"])

    logger.info(
        "REGISTERED REQUEST: phone=%s name=%s email=%s field=%s, refferer=%s",
        context.user_data.get("phone"),
        context.user_data.get("name"),
        context.user_data.get("email"),
        context.user_data["field"],
        context.user_data.get("referrer_id"),
    )

    await update.message.reply_text(
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –º–∏—Ä–µ:\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É ‚Äî –∑–¥–µ—Å—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∫–µ–π—Å—ã!\n"
        "–ü—Ä–æ–π–¥–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äî —É–∑–Ω–∞–π—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ —É –Ω–∞—Å!\n\n"
        "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? üëá",
        reply_markup=InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ", callback_data="education")],
                [InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu")],
            ]
        ),
    )
    logger.info("Registered user %s", update.effective_user.id)
    return ConversationHandler.END


async def registration_cancel(update: Update, _: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# ------------- Post‚Äëregistration callbacks -------------
async def referral_pressed(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await clear_kbd(query)

    hub = await reqs.get_hub_by_tg(query.from_user.id)

    if not hub or not hub.registered:
        await query.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."
        )
        return

    deep_link = f"https://t.me/{BOT_CONFIGS.bot_name}?start={hub.id}"
    await query.message.reply_text(f"""–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
ü§ù –î–µ–ª–∏—Ç–µ—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ!
–≠—Ç–æ –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{deep_link}
–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, –∫–æ–ª–ª–µ–≥–∞–º –∏–ª–∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.
–ü—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: –∫–∞–∂–¥—ã–π, –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.
–ü–æ–ª—É—á–∞–π—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ.
–£—Å–ª–æ–≤–∏—è:
–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–æ—à—ë–ª –ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–≤–µ—Ä—à–∏–ª —Å–¥–µ–ª–∫—É).
–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ:
–£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –¥–æ—Ö–æ–¥, –ø–æ–º–æ–≥–∞—è –¥—Ä—É–≥–∏–º!
–†–∞—Å—à–∏—Ä—è–π—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å–µ—Ç—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è!""",
    reply_markup=InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu")],
            ]
        ))


async def offers_pressed(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await send_video(update, ctx, "source4/actual_products.mp4")

    await reqs.spylog_click(tg_id=update.effective_user.id, button_id=SpyLogButton["act_prod_start"])

    query = update.callback_query
    await query.answer()
    await clear_kbd(query)

    await query.message.reply_text("""–¢–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ 
- –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç
- –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã (—Å –∫–æ–º–∏—Å—Å–∏—è–º–∏)
""",
    reply_markup=InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="products_request")],
                [InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu_f_offers")],
            ]
        )
    )


async def products_request_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await clear_kbd(query)

    await notr.products_send(
        name=context.user_data.get("phone"),
        phone=context.user_data.get("name"),
        email=context.user_data.get("email"),
        field_info=context.user_data["field"],
    )

    await reqs.spylog_click(tg_id=update.effective_user.id, button_id=SpyLogButton["act_prod_finish"])
    await reqs.spylog_click(tg_id=update.effective_user.id, button_id=SpyLogButton["act_prod_conv"])

    await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\r\n–° –≤–∞–º–∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.")
    await query.message.reply_text(menu_text(), reply_markup=build_main_menu(context.user_data["registered"]))


async def education_pressed(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await clear_kbd(query)

    await notr.start_edu_send(
        username=update.effective_user.username,
        name=ctx.user_data.get("phone"),
        phone=ctx.user_data.get("name"),
        email=ctx.user_data.get("email"),
        field_info=ctx.user_data.get("field"),
    )

    await reqs.spylog_click(tg_id=update.effective_user.id, button_id=SpyLogButton["edu_start"])

    hub = await reqs.get_hub_by_tg(tg_id=update.effective_user.id)

    if hub.lessons_progress and hub.lessons_progress >= 3:
        return

    query = update.callback_query
    await query.answer()

    await send_education(update.effective_chat.id, ctx)


async def send_education(chat_id: int, ctx: ContextTypes.DEFAULT_TYPE) -> None:

    hub = await reqs.get_hub_by_tg(chat_id)
    lesson_prog = hub.lessons_progress
    lesson_prog = 0 if lesson_prog is None else lesson_prog
    await ctx.bot.send_message(
        chat_id,
        """üî• –ì–æ—Ç–æ–≤—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏? üî•
–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É, –≥–¥–µ –≤–∞—Å –∂–¥—É—Ç:
üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ!
ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—â–µ–Ω–∏–µ —Å –æ–ø—ã—Ç–Ω—ã–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏, –≥–æ—Ç–æ–≤—ã–º–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏ —É—Å–ø–µ—Ö–∞!
üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Ä–æ—Å—Ç–∞ –≤–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞!
–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞–º! üëá""",
        reply_markup=build_lessons(lesson_prog),
    )


async def send_finish_education(chat_id: int, ctx: ContextTypes.DEFAULT_TYPE):
    await ctx.bot.send_message(
        chat_id,
        """üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ
–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–≤–æ–¥–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ!
üöÄ –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–∫—Ä—ã—Ç—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –∫–∞–Ω–∞–ª!
–í–Ω—É—Ç—Ä–∏ –≤–∞—Å –∂–¥—É—Ç:
‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
‚úÖ –û–±—â–µ–Ω–∏–µ —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏
‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–æ—Å—Ç–∞ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞
–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É
üì¢ –°–∫–æ—Ä–æ —Å—Ç–∞—Ä—Ç—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ–º!
–û—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üëá""",
        reply_markup=InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ó–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω—è –Ω–∞ –æ–±—É—á–µ–Ω–∏—è", callback_data="get_education")],
            ]
        ),
    )


async def lesson1_pressed(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    tg_id = update.effective_user.id

    await query.answer()
    await reqs.update_progress(tg_id, 1)

    await send_video(update, ctx, LESSONS[0][0])

    job_name = JOB_NAME_TPL % (tg_id, 1)
    for job in ctx.job_queue.get_jobs_by_name(job_name):
        job.schedule_removal()

    ctx.job_queue.run_once(
        lambda c: send_education(update.effective_chat.id, c),
        when=LESSONS[0][1],
    )


async def lesson2_pressed(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    tg_id = update.effective_user.id

    await query.answer()
    await reqs.update_progress(tg_id, 2)

    await send_video(update, ctx, LESSONS[1][0])

    job_name = JOB_NAME_TPL % (tg_id, 2)
    for job in ctx.job_queue.get_jobs_by_name(job_name):
        job.schedule_removal()

    ctx.job_queue.run_once(
        lambda c: send_education(update.effective_chat.id, c),
        when=LESSONS[1][1],
    )


async def lesson3_pressed(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    tg_id = update.effective_user.id

    await query.answer()
    await clear_kbd(query)
    await reqs.update_progress(tg_id, 3)

    await send_video(update, ctx, LESSONS[2][0])

    job_name = JOB_NAME_TPL % (tg_id, 3)
    for job in ctx.job_queue.get_jobs_by_name(job_name):
        job.schedule_removal()

    await notr.finish_edu_send(
        username=update.effective_user.username,
        name=ctx.user_data.get("phone"),
        phone=ctx.user_data.get("name"),
        email=ctx.user_data.get("email"),
        field_info=ctx.user_data.get("field"),
    )

    await reqs.spylog_click(tg_id=update.effective_user.id, button_id=SpyLogButton["edu_finish"])

    ctx.job_queue.run_once(
        lambda c: send_finish_education(update.effective_chat.id, c),
        when=LESSONS[2][1],
    )


async def get_education_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await clear_kbd(query)

    await notr.get_indiv_send(
        username=update.effective_user.username,
        name=context.user_data.get("phone"),
        phone=context.user_data.get("name"),
        email=context.user_data.get("email"),
        field_info=context.user_data.get("field"),
    )

    await reqs.spylog_click(tg_id=update.effective_user.id, button_id=SpyLogButton["edu_conv"])

    await query.message.reply_text("""üìã –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è!
–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ–º!
üìÖ –ö–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º:
–û–±—É—á–µ–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è [–¥–∞—Ç–∞/–ø–µ—Ä–∏–æ–¥] ‚Äî –º—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –∑–∞ 3 –¥–Ω—è –¥–æ –Ω–∞—á–∞–ª–∞.
üìå –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å:
üì• –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É (–≤–∫–ª—é—á–∞—è —Å–ø–∞–º) ‚Äî –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
üìö –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å: –í –∑–∞–∫—Ä—ã—Ç–æ–º –∫–∞–Ω–∞–ª–µ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.
ü§ù –û–±—â–∞–π—Ç–µ—Å—å: –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª ‚Äî –∫–æ–ª–ª–µ–≥–∏ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –ø–æ–º–æ–≥—É—Ç!
üö® –í–∞–∂–Ω–æ:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ! –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ, –≤–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.
üì© –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?
–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: [–∫–æ–Ω—Ç–∞–∫—Ç—ã]""",
        reply_markup=InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="offers")],
                [InlineKeyboardButton("–ú–µ–Ω—é", callback_data="menu")],
            ]
        )
    )


async def menu_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await clear_kbd(query)
    registered = context.user_data.get("registered", False)
    await query.message.reply_text(menu_text(), reply_markup=build_main_menu(registered))


async def menu_f_contact_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await reqs.spylog_click(tg_id=update.effective_user.id, button_id=SpyLogButton["connect_finish"])

    return await menu_pressed(update, context)


async def menu_f_offers_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await reqs.spylog_click(tg_id=update.effective_user.id, button_id=SpyLogButton["act_prod_finish"])

    return await menu_pressed(update, context)


# ------------- Main -------------

def main() -> None:
    token = BOT_CONFIGS.token
    if not token:
        raise RuntimeError("Set BOT_TOKEN environment variable")

    persistence = PicklePersistence(filepath="skyfort_bot_state.pkl")

    application = (
        Application.builder()
        .token(token)
        .persistence(persistence)
        .read_timeout(120)
        .write_timeout(120)
        .build()
    )

    # /start ‚Äî always available
    application.add_handler(CommandHandler("start", start))

    # Basic callback handlers
    application.add_handler(CallbackQueryHandler(agree_pressed, pattern="^agree$"))
    application.add_handler(CallbackQueryHandler(locked_pressed, pattern="^locked$"))
    application.add_handler(CallbackQueryHandler(contact_pressed, pattern="^contact$"))
    application.add_handler(CallbackQueryHandler(referral_pressed, pattern="^referral$"))
    application.add_handler(CallbackQueryHandler(offers_pressed, pattern="^offers$"))
    application.add_handler(CallbackQueryHandler(education_pressed, pattern="^education$"))
    application.add_handler(CallbackQueryHandler(contact_request_pressed, pattern="^contact_request$"))
    application.add_handler(CallbackQueryHandler(products_request_pressed, pattern="^products_request$"))
    application.add_handler(CallbackQueryHandler(lesson1_pressed, pattern="^lesson1$"))
    application.add_handler(CallbackQueryHandler(lesson2_pressed, pattern="^lesson2$"))
    application.add_handler(CallbackQueryHandler(lesson3_pressed, pattern="^lesson3$"))
    application.add_handler(CallbackQueryHandler(get_education_pressed, pattern="^get_education$"))
    application.add_handler(CallbackQueryHandler(menu_pressed, pattern="^menu$"))
    application.add_handler(CallbackQueryHandler(menu_f_contact_pressed, pattern="^menu_f_contact$"))
    application.add_handler(CallbackQueryHandler(menu_f_offers_pressed, pattern="^menu_f_offers$"))

    # Registration conversation (added after generic handlers so that `register` is caught)
    registration_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(register_pressed, pattern="^register$")],
        states={
            REG_CONTACT: [MessageHandler(filters.CONTACT, reg_contact)],
            REG_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_name)],
            REG_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_email)],
            REG_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_field)],
        },
        fallbacks=[
            CommandHandler("cancel", registration_cancel),
            CommandHandler("start", registration_cancel),  # restart resets convo
        ],
        per_user=True,
    )
    application.add_handler(registration_conv)

    # Store handler reference in user_data on conversation start so /start can cancel
    # (hook into ConversationHandler lifecycle)
    def store_conv(handler, key):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
            context.user_data["_conversation"] = (handler, key)
            return await handler.callback(update, context)

        return wrapper

    registration_conv.callback = store_conv(registration_conv, registration_conv._conversations)  # type: ignore

    application.run_polling()


if __name__ == "__main__":
    main()
